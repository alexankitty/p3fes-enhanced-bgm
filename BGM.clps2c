set BgmCodeCave 0x007cb2d0

ASM_START 0x00109204 //Remove bitshift that limits max ADX number
    nop
ASM_END

//Break ADX Limits
ASM_START 0x00109218
    addiu $a1, $gp, -0x7a48
ASM_END
ASM_START 0x0010921c
    move $a2, $v1
ASM_END
ASM_START 0x00109a8c
    move $a2, $s0
ASM_END
ASM_START 0x002dce44
    j 0x007cb2f8
    move $a0, $v0
ASM_END

//Hook the battle function
ASM_START 0x002dce3c
    j 0x007cb2d0
    li $a0, 0x1a
ASM_END

ASM_START BgmCodeCave
    beq $at, $zero, ProcessBattleBgm
    nop
    jal 0x0017d800
    nop
    j 0x002dce44
    nop
    ProcessBattleBgm: jal 0x001099d0
    move $a0, $v0
    j 0x002dce74
    nop
    //Check for special situations
    BattleInfo: lw $v0,-0x4904($gp) //battle info
    lw $v1,0xc($v0)
    lui $v0, 0x10
    and $v0, $v1, $v0
    beq $v0, $zero, GameCheckStart
    nop

    lw $v0, -0x4a0c($gp)
    lw $v1, 0x3c($v0)
    lui $v0, 0x3
    and $v0, $v1, $v0
    lw $v0, 0x3310($v0)
    bne $v0, $zero, GameCheckStart
    nop
    or $s2, $s2, 0x2 //set advantage bit
    //JourneyBGM          0x4d48
    //AnswerBgm           0x4d47
    //JourneyBgmCount     0x4d46
    //JourneyAdvBgmCount  0x4d45
    //AnswerBgmCount      0x4d44
    //AnswerAdvBgmCount   0x4d43
    //BgmOptions          0x4d42
    GameCheckStart: lb $a0, -0x4d42($gp)
        and $a0, $a0, 0x2 //clear irrelevant bits
        and $s2, $s2, $a0 //clear advantage if not enabled
        lb $a0, -0x4d4c($gp) // get answer bit
        or $s2, $s2, $a0
        lb $a0, -0x4d42($gp) // get options
        not $a0, $a0 // invert share check
        and $a0, $a0, 0x1 // clear extra bits
        and $a0, $s2, $a0 //clear the bottom bit unless sharing disabled
        or $s3, $s2, $a0 //or it back into the result
        and $s4, $s2, 0x1// check if journey or check forced
        bnez $s4, AnswerCheckStart
        nop
    JourneyCheckStart: lb $a0, -0x4d48($gp) //load journey bit field
        and $s2, $s3, 0x2 //check if advantage bit set
        beqz $s2, JourneyCheckMain
        nop
        addiu $s5, $zero, 0xe //set track
        and $s2, $s2, $a0 //Check it against bgm enablement
        bnez $s2, JourneyAdvBGM //Skip the first check if advantage
        nop
        b LoadOriginal
        nop
        JourneyCheckMain: or $s2, $zero, 0x1
            and $s2, $a0, 0x1 //check if journey is random
            bnez $s2, JourneyBGM
            nop
            addiu $s5, $zero, 0x1a //set track
            b LoadOriginal
            nop
    JourneyBGM: lb $s6, -0x4d46($gp) //load journey track count
        addiu $s4, $zero, 0x3e8 //set track start to 1000
        b Randomize
        nop
    JourneyAdvBGM: lb $s6, -0x4d45($gp) //load journey advantage track count
        addiu $s4, $zero, 0x2328 //set track start to 9000
        addiu $s5, $zero, 0xe //set track
        b Randomize
        nop
    AnswerCheckStart: lb $a0, -0x4d47($gp) //load Answer bit field
        and $s2, $s3, 0x2 //check if advantage bit set
        beqz $s2, AnswerCheckMain
        nop
        addiu $s5, $zero, 0xe //set track
        and $s2, $s2, $a0 //Check it against bgm enablement
        bnez $s2, AnswerAdvBGM //Skip the first check if advantage
        nop
        b LoadOriginal
        nop
        AnswerCheckMain: or $s2, $zero, 0x1
            and $s2, $a0, 0x1 //check if Answer is random
            bnez $s2, AnswerBGM
            nop
            addiu $s5, $zero, 0x6a //set track
            b LoadOriginal
            nop
    AnswerBGM: lb $s6, -0x4d44($gp) //load Answer track count
        addiu $s4, $zero, 0x1f40 //set track start to 8000
        b Randomize
        nop
    AnswerAdvBGM: lb $s6, -0x4d43($gp) //load Answer advantage track count
        addiu $s4, $zero, 0x2710 //set track start to 10000
        addiu $s5, $zero, 0xd //set track
        b Randomize
        nop
    Randomize: jal 0x001099D0 //rnd
        nop
        divu $v0, $s6
        mfhi $a0
        addu $a0, $a0, $s4
        b LoadRandom
        nop

    // Play Music
    LoadOriginal: move $a0, $s5
    LoadRandom: move $s2, $zero
        move $s3, $zero
        move $s4, $zero
        move $s5, $zero
        move $s6, $zero
        jal 0x001099D0
        nop
        j 0x002dce74
        nop
ASM_END